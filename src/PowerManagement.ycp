/**
 * File:	modules/PowerManagement.ycp
 * Package:	Configuration of power-management
 * Summary:	PowerManagement settings, input and output functions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of power-management.
 * Input and output routines.
 */

{

module "PowerManagement";
textdomain "power-management";

import "Mode";
import "Package";
import "Progress";
import "Report";
import "Service";
import "Summary";

/**
 * Prototypes
 */
global boolean Modified();

// persistent variables

global list<map<string,string> > schemes = [];

global map<string,string> common_settings = $[];

global map<string,string> daemon_settings = $[];

global map<string,string> new_schemes = $[];

global string apm_acpi = "";

global map scheme_names = $[
    // power saving scheme name, combo box and default contents of text entry
    "Performance" : _("Performance"),
    // power saving scheme name, combo box and default contents of text entry
    "Powersave" : _("Powersave"),
    // power saving scheme name, combo box and default contents of text entry
    "Acoustic" : _("Acoustic"),
];

global map scheme_desciptions = $[
    "Scheme optimized to let machine run on maximum performance." :
	// pwer saving scheme description, contents of text entry
	_("Scheme optimized to let machine run on maximum performance."),
    "Scheme optimized to let maximum power savings take place." :
	// pwer saving scheme description, contents of text entry
	_("Scheme optimized to let maximum power savings take place."),
    "Scheme optimized to let machine run as quiet as possible." :
	// pwer saving scheme description, contents of text entry
	_("Scheme optimized to let machine run as quiet as possible."),
];


/**
 * Data was modified?
 */
global boolean modified = false;

/**
 */
global boolean proposal_valid = false;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * Abort function
 * return boolean return true if abort
 */
global boolean() AbortFunction = Modified;

// UI helping variables

global list<map<string,string> > current_schemes = [];
global integer current_scheme_index = -1;
global map<string,string> current_scheme = $[];


/**
 * Abort function
 * @return blah blah lahjk
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
	return AbortFunction ();
    return false;
}

/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}



/**
 * Read all power-management settings
 * @return true on success
 */
global boolean Read() {

    /* PowerManagement read dialog caption */
    string caption = _("Initializing Power Management Configuration");

    integer steps = 3;

    integer sl = 500;
    sleep(sl);

    boolean success = true;
    boolean stage_success = true;

    // We do not set help text here, because it was set outside
    Progress::New( caption, " ", steps, [
	    /* Progress stage 1/3 */
	    _("Check environment"),
	    /* Progress stage 2/3 */
	    _("Read general settings"),
	    /* Progress stage 3/3 */
	    _("Read power saving schemes"),
	], [
	    /* Progress step 1/3 */
	    _("Checking the environment..."),
	    /* Progress step 2/3 */
	    _("Reading general settings..."),
	    /* Progress step 3/3 */
	    _("Reading power saving schemes..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // read database
    if(Abort()) return false;
    Progress::NextStage();

    // check installed packages
    if (! Package::Installed ("powersave") || Mode::config)
    {
	boolean install_ok = Package::Install ("pwoersave");
	if (! install_ok && ! Package::LastOperationCanceled ())
	{
	    // error popup
	    Report::Error (_("Installing required packages failed."));
	    return false;
	}
    }
    // check supported APM or ACPI
    map out = (map)SCR::Execute (.target.bash_output,
	"/usr/bin/powersave --apm-acpi");
    if (issubstring (out["stdout"]:"", "ACPI"))
	apm_acpi = "ACPI";
    else if (issubstring (out["stdout"]:"", "APM"))
	apm_acpi = "APM";
    else
    {
	// error report
	Report::Error (_("This system does not support ACPI or APM."));
	return false;
    }

    y2milestone ("Dected saving mehanism: %1", apm_acpi);

    if(! stage_success)
    {
	/* Error message */
	Report::Error(_("Cannot read the database1."));
    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    // read general settings
    if(Abort()) return false;
    Progress::NextStage();

    list<string> ds_list = (list<string>)SCR::Dir (.etc.powersave.value);
    daemon_settings = $[];
    foreach (string k, ds_list, ``{
	string v = (string) SCR::Read (add (.etc.powersave.value, k));
	daemon_settings[k] = v;
    });

    list<string> ss_list = (list<string>)SCR::Dir (.sysconfig.powersave.common);
    common_settings = $[];
    foreach (string k, ss_list, ``{
	string v = (string) SCR::Read (add (.sysconfig.powersave.common, k));
	common_settings[k] = v;
    });

    if(! stage_success)
    {
	/* Error message */
	Report::Error(_("Cannot read the general settings."));
    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    // read saving schemes
    if(Abort()) return false;
    Progress::NextStage();

    list<string> r_schemes = (list<string>)
	SCR::Dir (.sysconfig.powersave.schemes.section);
    foreach (string s, r_schemes, ``{
	map<string,string> scheme = $[
	    "_scheme_id" : s,
	];
	path p = add (.sysconfig.powersave.schemes.value, s);
	foreach (string k, (list<string>)SCR::Dir (p), ``{
	    string v = (string)SCR::Read (add (p, k));
	    scheme[k] = v;
	});
	schemes = (list<map<string,string> >)add (schemes, scheme);
    });
    new_schemes = $[];

    if(! stage_success)
    {
	/* Error message */
	Report::Warning(_("Cannot read power saving schemes."));
    }
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    success = success && stage_success;
    sleep(sl);

    if(Abort()) return false;
    modified = false;

    y2debug ("Common settings: %1", common_settings);
    y2debug ("Daemon settings: %1", daemon_settings);
    y2debug ("Power saving schemes: %1", schemes);

    return success;
}

/**
 * Write all power-management settings
 * @return true on success
 */
global boolean Write() {

    /* PowerManagement read dialog caption */
    string caption = _("Saving Power Management Configuration");

    integer steps = 3;

    integer sl = 500;
    sleep(sl);

    boolean success = true;
    boolean stage_success = true;

    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/3 */
	    _("Write schemes"),
	    /* Progress stage 2/3 */
	    _("Write general settings"),
	    /* Progress stage 3/3 */
	    _("Restart powersave daemon")
	], [
	    /* Progress step 1/3 */
	    _("Writing schemes..."),
	    /* Progress step 2/3 */
	    _("Writing general settings..."),
	    /* Progress step 3/3 */
	    _("Restarting powersave daemon..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // write schemes
    if(Abort()) return false;
    Progress::NextStage();

    // copy new scheme files
    foreach (string dst, string src, new_schemes, ``{
	if (dst != "")
	{
	    stage_success = (0 == SCR::Execute (.target.bash, sformat (
		"cat /etc/sysconfig/powersave/scheme_%1 | awk '
/^## Path:.*$/ { printf (\"## Path: System/Powermanagement/Scheme/%2\\n\");
next }
// {print $0;}' >  /etc/sysconfig/powersave/scheme_%2",
		src, dst))) && stage_success;
	}
    });

    // remove deleted schemes
    list<string> old = (list<string>)SCR::Dir (.sysconfig.powersave.schemes.section);
    list<string> current = maplist (map<string,string> s, schemes, ``(
	s["_scheme_id"]:""
    ));
    list<string> delete = filter (string s, old, ``(! contains (current, s)));
    foreach (string s, delete, ``{
	SCR::Write (add (.sysconfig.powersave.schemes.section, s), nil);
    });

    // write the settings
    foreach (map<string,string> scheme, schemes, ``{
	string id = scheme["_scheme_id"]:"";
	path p = add (.sysconfig.powersave.schemes.value, id);
	foreach (string k, string v, scheme, ``{
	    if (k != "_scheme_id")
		SCR::Write (add (p, k), v);
	});
    });
    SCR::Write (.sysconfig.powersave.schemes, nil);

    if(! stage_success)
    {
	/* Error message */
	Report::Error(_("Cannot write power saving schemes."));
    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    // write global settings
    if(Abort()) return false;
    Progress::NextStage ();

    path p = .sysconfig.powersave.common;
    foreach (string k, string v, common_settings, ``{
	SCR::Write (add (p, k), v);
    });
    SCR::Write (p, nil);

    p = .etc.powersave.value;
    foreach (string k, string v, daemon_settings, ``{
	SCR::Write (add (p, k), v);
    });
    SCR::Write (.etc.powersave, nil);

    if(! stage_success)
    {
	/* Error message */
	Report::Error(_("Cannot write general settings."));
    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    // restart daemon
    if(Abort()) return false;
    Progress::NextStage ();

    stage_success = Service::Restart ("powersave");
    stage_success = Service::Enable ("powersave") && stage_success;

    if(! stage_success)
    {
	/* Error message */
	Report::Error(_("Cannot restart the powersave daemon."));
    }
    success = success && stage_success;
    stage_success = true;
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Get all power-management settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {
    schemes = settings["schemes"]:[];
    common_settings = settings["common_settings"]:$[];
    daemon_settings = settings["daemon_settings"]:$[];
    return true;
}

/**
 * Dump the power-management settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
    return $[
	"schemes" : schemes,
	"common_settings" : common_settings,
	"daemon_settings" : daemon_settings,
    ];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global list Summary() {
    string ac_scheme = "";
    string bat_scheme = "";
    string scheme = PowerManagement::common_settings["POWERSAVE_AC_SCHEME"]:"";
    if (scheme == "")
	scheme = "performance";

    foreach (map<string,string> s, schemes, ``{
	if (s["_scheme_id"]:"" == scheme)
	    ac_scheme = s["POWERSAVE_SCHEME_DESCRIPTION"]:"";
    });
    if (ac_scheme == "")
	ac_scheme = scheme;

    UI::ChangeWidget (`id (`ac_scheme), `Value, scheme);
    scheme = PowerManagement::common_settings["POWERSAVE_BATTERY_SCHEME"]:"";
    if (scheme == "")
        scheme = "performance";
    foreach (map<string,string> s, schemes, ``{
	if (s["_scheme_id"]:"" == scheme)
	    bat_scheme = s["POWERSAVE_SCHEME_DESCRIPTION"]:"";
    });
    if (bat_scheme == "")
	bat_scheme = scheme;


    return [
	sformat (_("AC scheme: %1"), ac_scheme),
	sformat (_("Battery scheme: 1"), bat_scheme),
    ];
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
    return $[ "install":["powersave"], "remove":[] ];
}

/* EOF */
}
