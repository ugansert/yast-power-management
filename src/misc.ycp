/**
 * File:	include/power-management/misc.ycp
 * Package:	Configuration of power-management
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "power-management";

import "Label";
import "Popup";
import "PowerManagement";

map acpi_event_labels = $[
    // combo box item
    "notify" : _("Notify"),
    // combo box item
    "wm_shutdown" : _("Shut Down"),
    // combo box item
    "wm_logout" : _("Log Out"),
    // combo box item
    "standby" : _("Stand-by"),
    // combo box item
    "suspend_to_ram" : _("Suspend to RAM"),
    // combo box item
    "suspend_to_disk" : _("Suspend to Disk"),
    // combo box item
    "screen_saver" : _("Start Screen Saver"),
    // combo box item
    "ignore" : _("Ignore"),
];

list acpi_event_handlers = nil;

list acpi_actions = [ "notify", "wm_shutdown", "wm_logout",
    "standby", "suspend_to_ram", "suspend_to_disk",
    "screen_saver", "ignore" ];


define list GetAcpiEventHandlers () {
    if (acpi_event_handlers == nil)
    {
	list<string> actions = [ "notify", "wm_shutdown", "wm_logout",
	    "standby", "suspend_to_ram", "suspend_to_disk",
	    "screen_saver", "ignore" ];
	acpi_event_handlers = maplist (string a, actions, {
	    return `item (`id (a), acpi_event_labels[a]:a);
	});
    }
    return acpi_event_handlers;
}


string GetBatteryStatusAction (string status) {
    string option = sformat ("EVENT_BATTERY_%1", status);
    string value = PowerManagement::global_settings[option]:"";
    if (value == "")
	value = "ignore";
    return value;
}

void SetBatteryStatusAction (string status, string action) {
    string option = sformat ("EVENT_BATTERY_%1", status);
    PowerManagement::global_settings[option] = action;
}

integer GetBatteryStatusCapacity (string status) {
    string option = sformat ("BATTERY_%1", status);
    string value = PowerManagement::global_settings[option]:"";
    if (value == "")
	value = "0";
    integer i_value = tointeger (value);
    return i_value;
}

void SetBatteryStatusCapacity (string status, integer capacity) {
    string option = sformat ("BATTERY_%1", status);
    string value = sformat ("%1", capacity);
    PowerManagement::global_settings[option] = value;
}

string GetAcpiButtonAction (string button) {
    string option = sformat ("EVENT_BUTTON_%1", button);
    string value = PowerManagement::global_settings[option]:"";
    if (value == "")
	value = "ignore";
    return value;
}

void SetAcpiButtonAction (string button, string action) {
    string option = sformat ("EVENT_BUTTON_%1", button);
    PowerManagement::global_settings[option] = action;
}

boolean GetActionAllowed (string action) {
    string key = sformat ("DISABLE_USER_%1", action);
    string value = PowerManagement::global_settings
        [key]:"yes";
    return tolower (value) == "no";
}

void SetActionAllowed (string action, boolean allowed) {
    string value = allowed
	? "no"
	: "yes";
    string option = sformat ("DISABLE_USER_%1", action);
    PowerManagement::global_settings[option] = value;
}

/* EOF */
}
