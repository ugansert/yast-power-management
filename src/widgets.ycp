/**
 * File:	include/power-management/complex.ycp
 * Package:	Configuration of power-management
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "power-management";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "PowerManagement";

include "power-management/helps.ycp";

// global data


list acpi_event_handlers = [
    // combo box item
    `item (`id ("notify"), _("Notify")),
    // combo box item
    `item (`id ("wm_shutdown"), _("Shut Down")),
    // combo box item
    `item (`id ("wm_logout"), _("Log Out")),
    // combo box item
    `item (`id ("standby"), _("Stand-by")),
    // combo box item
    `item (`id ("suspend"), _("Suspend")),
    // combo box item
    `item (`id ("screen_saver"), _("Start Screen Saver")),
    // combo box item
    `item (`id ("ignore"), _("Ignore")),
];

// battery warning widget

/**
 * Init function of a widget
 * @param key string widget id
 */
define void BatteryWarningInit (string key) {
    foreach (string w, ["WARNING", "LOW", "CRITICAL"], {
	string option = sformat ("POWERSAVE_EVENT_BATTERY_%1", w);
	string widget = sformat ("A_%1", w);
	string value = PowerManagement::common_settings[option]:"";
	if (value == "")
	    value = "ignore";
	UI::ChangeWidget (`id (widget), `Value, value);
	option = sformat ("POWERSAVED_BATTERY_%1", w);
	value = PowerManagement::daemon_settings[option]:"";
	if (value == "")
	    value = "0";
	integer i_value = tointeger (value);
	UI::ChangeWidget (`id (w), `Value, i_value);
    });
    UI::SetFocus (`id ("POWER"));
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void BatteryWarningStore (string key, map event) {
    foreach (string w, ["WARNING", "LOW", "CRITICAL"], {
	string option = sformat ("POWERSAVE_EVENT_BATTERY_%1", w);
	string widget = sformat ("A_%1", w);
	string value = (string)UI::QueryWidget (`id (widget), `Value);
	PowerManagement::common_settings[option] = value;
	option = sformat ("POWERSAVED_BATTERY_%1", w);
	integer i_value = (integer)UI::QueryWidget (`id (w), `Value);
	value = sformat ("%1", i_value);
	PowerManagement::daemon_settings[option] = value;
    });
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getBatteryWarning () {
    return $[
	"widget" : `custom,
	// frame
	"custom_widget" : `Frame (_("Battery Capacity Feedback"), `HBox (
	    `HSpacing (2),
	    `VBox (
		`VSpacing (2),
		`IntField (`id ("WARNING"),
		    `opt (`hstretch),
		    // int field
		    _("&Warning Capacity"),
		    0, 100, 0),
		`VSpacing (1),
		`IntField (`id ("LOW"),
		    `opt (`hstretch),
		    // int field
		    _("&Low Capacity"),
		    0, 100, 0),
                `VSpacing (1),
                `IntField (`id ("CRITICAL"),
                    `opt (`hstretch),
		    // int field
		    _("&Critical Capacity"),
		    0, 100, 0),
                `VSpacing (2)
            ),
            `HSpacing (2),
	    `VBox (
		`VSpacing (2),
		`ComboBox (`id ("A_WARNING"),
		    `opt (`hstretch),
                    // combo box
		    _("War&ning Level Action"),
		    acpi_event_handlers),
		`VSpacing (1),
		`ComboBox (`id ("A_LOW"),
		    `opt (`hstretch),
                    // combo box
		    _("Low Level &Action"),
                    acpi_event_handlers),
                `VSpacing (1),
                `ComboBox (`id ("A_CRITICAL"),
                    `opt (`hstretch),
                    // combo box
		    _("Cr&itical Level Action"),
                    acpi_event_handlers),
                `VSpacing (2)
            ),
	    `HSpacing (2)
	)),
	"help" : HELPS["battery_warning"]:"",
	"init" : BatteryWarningInit,
	"store" : BatteryWarningStore,
    ];
}

// acpi buttons widget

/**
 * Init function of a widget
 * @param key string widget id
 */
define void AcpiButtonsInit (string key) {
    foreach (string w, ["POWER", "SLEEP", "LID_CLOSED"], {
	string option = sformat ("POWERSAVE_EVENT_BUTTON_%1", w);
	string value = PowerManagement::common_settings[option]:"";
	if (value == "")
	    value = "ignore";
	UI::ChangeWidget (`id (w), `Value, value);
    });
    UI::SetFocus (`id ("POWER"));
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void AcpiButtonsStore (string key, map event) {
    foreach (string w, ["POWER", "SLEEP", "LID_CLOSED"], {
	string option = sformat ("POWERSAVE_EVENT_BUTTON_%1", w);
	string value = (string)UI::QueryWidget (`id (w), `Value);
	PowerManagement::common_settings[option] = value;
    });
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getAcpiButtonsWidget () ``{
    return $[
	"widget" : `custom,
	// frame
	"custom_widget" : `Frame (_("ACPI Button Configuration"), `HBox (
	    `HSpacing (2),
	    `VBox (
		`VSpacing (2),
		`ComboBox (`id ("POWER"),
		    `opt (`hstretch),
		    // combo box
		    _("&Power Button"),
		    acpi_event_handlers),
		`VSpacing (1),
		`ComboBox (`id ("SLEEP"),
		    `opt (`hstretch),
		    // combo box
		    _("&Sleep Button"),
		    acpi_event_handlers),
		`VSpacing (1),
		`ComboBox (`id ("LID_CLOSED"),
		    `opt (`hstretch),
		    // combo box
		    _("&Laptop's Lid Closing"),
		    acpi_event_handlers),
		`VSpacing (2)
	    ),
	    `HSpacing (2)
	)),
	"help" : HELPS["acpi_buttons"]:"",
	"init" : AcpiButtonsInit,
	"store" : AcpiButtonsStore,
    ];
}

// battery warning button

/**
 * Handle function of a widget
 * @param key string widget id
 * @param event map event that will be handled
 * @return symbol for wizard sequencer
 */
define symbol BatteryWarningHandle (string key, map event) {
    return `battery;
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getBatteryWarningButton () {
    return $[
	"widget" : `push_button,
	// push button
	"label" : _("Batt&ery Warning"),
	"opt" : [ `hstretch ],
	"help" : HELPS["battery_warning_button"]:"",
	"handle" : BatteryWarningHandle,
	"handle_events" : [ "battery_warning_button" ],
    ];
}

/**
 * Handle function of a widget
 * @param key string widget id
 * @param event map event that will be handled
 * @return symbol for wizard sequencer
 */
define symbol AcpiSettingsButtonHandle (string key, map event) {
    return `buttons;
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getAcpiSettingsButton () {
    return $[
	"widget" : `push_button,
	// push button
	"label" : _("AC&PI Settings"),
	"opt" : [ `hstretch ],
	"help" : HELPS["acpi_settings_button"]:"",
	"handle" : AcpiSettingsButtonHandle,
	"handle_events" : [ "acpi_settings_button" ],
    ];
}

// scheme selection widget

/**
 * Handle function of a widget
 * @param key string widget id
 * @param event map event that will be handled
 * @return symbol for wizard sequencer
 */
define symbol SchemeSelectionHandle (string key, map event) {
    any ev_id = event["ID"]:nil;
    if (ev_id == `schemes_edit)
	return `schemes_edit;
    if (ev_id == `ac_scheme || ev_id == `dc_scheme)
    {
	string current = (string)UI::QueryWidget (`id (ev_id), `Value);
	string descr = "";
	foreach (map s, PowerManagement::schemes, {
	    if (s["_scheme_id"]:"" == current)
		descr = s["POWERSAVE_SCHEME_DESCRIPTION"]:"";
	});
	descr = PowerManagement::scheme_desciptions[descr]:descr;
	if (descr == "")
	{
	    // fallback scheme description, displayed in a rich text
	    // but without HTML tags!!!
	    descr = _("No scheme description available");
	}
	UI::ChangeWidget (`id (ev_id == `ac_scheme ? `ac_descr : `dc_descr),
	    `Value, descr);
    }

    return nil;
}

/**
 * Init function of a widget
 * @param key string widget id
 */
define void SchemeSelectionInit (string key) {
    list items = maplist (map<string,string> s, PowerManagement::schemes, {
	string id = s["_scheme_id"]:"";
	string name = s["POWERSAVE_SCHEME_NAME"]:id;
	name = PowerManagement::scheme_names[name]:name;
	return `item (`id (id), name);
    });
    UI::ReplaceWidget (`ac_scheme_rp,
	`ComboBox (`id (`ac_scheme), `opt (`hstretch, `notify),
	    // combo box
	    _("&AC Powered"), items));
    UI::ReplaceWidget (`dc_scheme_rp,
	`ComboBox (`id (`dc_scheme), `opt (`hstretch, `notify),
	    // combo box
	    _("&Battery Powered"), items));

    string scheme = PowerManagement::common_settings["POWERSAVE_AC_SCHEME"]:"";
    if (scheme == "")
	scheme = "performance";
    UI::ChangeWidget (`id (`ac_scheme), `Value, scheme);
    scheme = PowerManagement::common_settings["POWERSAVE_BATTERY_SCHEME"]:"";
    if (scheme == "")
	scheme = "performance";
    UI::ChangeWidget (`id (`dc_scheme), `Value, scheme);
    SchemeSelectionHandle (key, $["ID" : `ac_scheme ]);
    SchemeSelectionHandle (key, $["ID" : `dc_scheme ]);
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void SchemeSelectionStore (string key, map event) {
    PowerManagement::common_settings["POWERSAVE_BATTERY_SCHEME"]
	= (string)UI::QueryWidget (`id (`dc_scheme), `Value);
    PowerManagement::common_settings["POWERSAVE_AC_SCHEME"]
	= (string)UI::QueryWidget (`id (`ac_scheme), `Value);
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getSchemeSelectionWidget () {
    return $[
	"widget" : `custom,
	// frame
	"custom_widget" : `Frame (_("Energy Saving Schemes"), `VBox (
	    `HBox (
		`HWeight (1, `VBox (
		    `ReplacePoint (`id (`ac_scheme_rp),
			`ComboBox (`id (`ac_scheme), `opt (`hstretch, `notify),
			    // combo box
			    _("&AC Powered"), [])),
		    `RichText (`id (`ac_descr), `opt (`hstretch), "")
		)),
		`HWeight (1, `VBox (
		    `ReplacePoint (`id (`dc_scheme_rp),
			`ComboBox (`id (`dc_scheme), `opt (`hstretch, `notify),
			    // combo box
			    _("&Battery Powered"), [])),
		    `RichText (`id (`dc_descr), `opt (`hstretch), "")
		))
	    ),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`schemes_edit),
		    // push button
		    _("Ed&it Schemes")),
		`HStretch ()
	    )
	)),
	"init" : SchemeSelectionInit,
	"handle" : SchemeSelectionHandle,
	"handle_events" : [`schemes_edit, `ac_scheme, `dc_scheme],
	"store" : SchemeSelectionStore,
	"help" : HELPS["scheme_selection"]:"",
    ];
}


// schemes list widget

/**
 * Redraw the table of energy saving schemes
 */
define void SchemesRedraw () {
    list items = maplist (map<string,string> s,
	PowerManagement::current_schemes,
    {
	string scheme_id = s["_scheme_id"]:"";
	string name = s["POWERSAVE_SCHEME_NAME"]:scheme_id;
	name = PowerManagement::scheme_names[name]:name;
	string descr = s["POWERSAVE_SCHEME_DESCRIPTION"]:"";
	descr = PowerManagement::scheme_desciptions[descr]:descr;
	if (descr == "")
	{
	    // fallback scheme description, table entre
	    descr = _("No scheme description available");
	}
	return `item (`id (scheme_id), name, descr);
    });
    UI::ChangeWidget (`id (`schemes), `Items, items);
    UI::SetFocus (`schemes);
}

/**
 * Handle function of a widget
 * @param key string widget id
 * @param event map event that will be handled
 * @return symbol for wizard sequencer
 */
define symbol SchemesHandle (string key, map event) {
    any event_id = event["ID"]:nil;
    string selected = (string)UI::QueryWidget (`id (`schemes), `CurrentItem);
    integer index = -1;
    integer found = -1;
    foreach (map s, PowerManagement::current_schemes, ``{
	index = index + 1;
	if (PowerManagement::current_schemes[index,"_scheme_id"]:"" == selected)
	    found = index;
    });
    if (event_id == `add)
    {
	PowerManagement::current_scheme_index = -1;
	PowerManagement::current_scheme
	    = PowerManagement::current_schemes[found]:$[];
	PowerManagement::current_scheme["_scheme_id"] = "";
	PowerManagement::current_scheme["POWERSAVE_SCHEME_NAME"] = "";
	PowerManagement::new_schemes[""] = selected;
	return `add;
    }
    else if (event_id == `edit)
    {
	if (selected == nil)
	{
	    // popup message
	    Popup::Message (_("No scheme selected."));
	}
	if (selected == "performance" || selected == "powersave")
	{
	  // FIXME update after talking to MD people
	  if (false)
	  {
	    // popup message
	    Popup::Message (_("The selected scheme cannot be modified.
Add a new one instead."));
	    return nil;
	  }
	}
	PowerManagement::current_scheme_index = found;
	PowerManagement::current_scheme
	    = PowerManagement::current_schemes[found]:$[];
	return `edit;
    }
    else if (event_id == `delete)
    {
	if (selected == nil)
	{
	    // popup message
	    Popup::Message (_("No scheme selected."));
	}
	if (selected == "performance" || selected == "powersave")
	{
	  // FIXME update after talking to MD people
	  if (false)
	  {
	    // popup message
	    Popup::Message (_("The selected scheme cannot be deleted."));
	    return nil;
	  }
	}
	PowerManagement::current_schemes = filter (
	    map<string,string>s,
	    PowerManagement::current_schemes,
	{
	    return s["_scheme_id"]:"" != selected;
	});
	SchemesRedraw ();
	UI::ChangeWidget (`id (`schemes), `CurrentItem,
	    PowerManagement::current_schemes[0, "_scheme_id"]:"");
	if (haskey (PowerManagement::new_schemes, selected))
	    PowerManagement::new_schemes = (map<string,string>)remove (
		PowerManagement::new_schemes, selected);
    }
    selected = (string)UI::QueryWidget (`id (`schemes), `CurrentItem);
    boolean enabled = true;
    if (selected == "performance" || selected == "powersave")
    {
	enabled = false;
    }
    UI::ChangeWidget (`id (`delete), `Enabled, enabled);
    return nil;
}

/**
 * Init function of a widget
 * @param key string widget id
 */
define void SchemesInit (string key) {
    SchemesRedraw ();
    SchemesHandle (key, $[]);
    UI::ChangeWidget (`id (`schemes), `CurrentItem,
	PowerManagement::current_schemes[0, "_scheme_id"]:"");
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getSchemesListWidget () {
    return $[
	"widget" : `custom,
	"custom_widget" : `VBox (
	    `Table (`id (`schemes), `opt (`notify, `immediate), `header (
		// table header
		_("Scheme Name"),
		// table header
		_("Scheme Description")),
		[]),
	    `HBox (
		`PushButton (`id (`add), Label::AddButton ()),
		`PushButton (`id (`edit), Label::EditButton ()),
		`PushButton (`id (`delete), Label::DeleteButton ()),
		`HStretch ()
	    )
	),
	"init" : SchemesInit,
	"handle" : SchemesHandle,
	"help" : HELPS["schemes_list"]:"",
    ];
}

// scheme name widget

string original_scheme_name = "";

/**
 * Init function of a widget
 * @param key string widget id
 */
define void SchemeNameInit (string key) {
    string scheme_name
	= PowerManagement::current_scheme["POWERSAVE_SCHEME_NAME"]:"";
    if (scheme_name == "")
        scheme_name = PowerManagement::current_scheme["_scheme_id"]:"";
    original_scheme_name = scheme_name;
    scheme_name = PowerManagement::scheme_names[scheme_name]:scheme_name;
    UI::ChangeWidget (`id (key), `Value, scheme_name);
}

/**
 * Validate function of a widget
 * @param key string widget id
 * @param event map event that caused widget validation
 * @return boolean true if validation succeeded
 */
define boolean SchemeNameValidate (string key, map event) {
    string new_name = (string)UI::QueryWidget (`id (key), `Value);
    if (new_name == "")
    {
	// popup message
	Popup::Message (_("Scheme name must be set."));
	return false;
    }
    if (new_name == original_scheme_name)
	return true;
    list<string> names = maplist (map s, PowerManagement::current_schemes, {
	return s["POWERSAVE_SCHEME_NAME"]:s["_scheme_key"]:"";
    });
    if (contains (names, new_name))
    {
	// popup message
	Popup::Message (_("The specified scheme name is not unique."));
	return false;
    }
    return true;
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void SchemeNameStore (string key, map event) {
    string new_name = (string)UI::QueryWidget (`id (key), `Value);
    PowerManagement::current_scheme["POWERSAVE_SCHEME_NAME"] = new_name;

    if (original_scheme_name == "")
    {
	string scheme_id = new_name;
	scheme_id = filterchars (scheme_id, "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
	if (scheme_id == "")
	    scheme_id = "user";
	list<string> ids = maplist (map s, PowerManagement::current_schemes, {
	    return s["_scheme_key"]:"";
	});
	if (contains (ids, scheme_id))
	{
	    integer index = 0;
	    while (contains (ids, sformat ("%1_%2", scheme_id, index)))
		index = index + 1;
	    scheme_id = sformat ("%1_%2", scheme_id, index);
	}
	PowerManagement::current_scheme["_scheme_id"] = scheme_id;
	PowerManagement::new_schemes[scheme_id]
	    = PowerManagement::new_schemes[""]:"";
    }
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getSchemeNameWidget () {
    return $[
	"widget" : `textentry,
	// text entry
	"label" : _("S&cheme Name"),
	"help" : HELPS["scheme_name"]:"",
	"init" : SchemeNameInit,
	"store" : SchemeNameStore,
	"validate" : SchemeNameValidate,
    ];
}

// scheme description widget

/**
 * Init function of a widget
 * @param key string widget id
 */
define void SchemeDescrInit (string key) {
    string descr = (string)
	(PowerManagement::current_scheme["POWERSAVE_SCHEME_DESCRIPTION"]:"");
    descr = PowerManagement::scheme_desciptions[descr]:descr;
    UI::ChangeWidget (`id (key), `Value, descr);
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void SchemeDescrStore (string key, map event) {
    PowerManagement::current_scheme["POWERSAVE_SCHEME_DESCRIPTION"]
	= (string)UI::QueryWidget (`id (key), `Value);
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getSchemeDescrWidget () {
    return $[
	"widget" : `textentry,
	// text entry
	"label" : _("Scheme &Description"),
	"help" : HELPS["scheme_descr"]:"",
	"init" : SchemeDescrInit,
	"store" : SchemeDescrStore,
    ];
}

// hard disk settings widget

/**
 * Init function of a widget
 * @param key string widget id
 */
define void HardDiskInit (string key) {
    string value = (string)
	PowerManagement::current_scheme["POWERSAVE_DISK_STANDBY_MODE"]:"";
    if (value == "")
	value = "powersave";
    UI::ChangeWidget (`id (`standby), `Value, value);
    value = (string)
	PowerManagement::current_scheme["POWERSAVE_DISK_ACOUSTIC"]:"";
    if (value == "")
	value = "quiet";
    UI::ChangeWidget (`id (`acoustic), `Value, value);
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void HardDiskStore (string key, map event) {
    PowerManagement::current_scheme["POWERSAVE_DISK_STANDBY_MODE"]
	= (string)UI::QueryWidget (`id (`standby), `Value);
    PowerManagement::current_scheme["POWERSAVE_DISK_ACOUSTIC"]
	= (string)UI::QueryWidget (`id (`acoustic), `Value);
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getHardDiskWidget () {
    return $[
	"widget" : `custom,
	// frame,
	"custom_widget" : `Frame (_("Hard Disk"), `VBox (
	    `VStretch (),
	    // combo box
	    `Left (`ComboBox (`id (`standby), `opt (`hstretch),
		// combo box
		_("&Stand-by Policy"),
		[
		    `item (`id ("performance"),
			// combo box item
			_("Maximum Performance")),
		    `item (`id ("powersave"),
			// combo box item
			_("Power Saving")),
		    `item (`id ("aggressiv_powersave"),
			// combo box item
			_("Aggressive Power Saving"))
		])),
	    `VStretch (),
	    `Left (`ComboBox (`id (`acoustic), `opt (`hstretch),
		// combo box
		_("&Acoustic Policy"),
		[
		    `item (`id ("performance"),
			// combo box item
			_("Maximum Performance")),
		    `item (`id ("low"),
			// combo box item
			_("Quiet")),
		    `item (`id ("quiet"),
			// combo box item
			_("Maximally Quiet")),
		])),
	    `VStretch ()
	)),
	"init" : HardDiskInit,
	"store" : HardDiskStore,
	"help" : HELPS["hard_disk"]:"",
    ];
}

// cpu cooling policy widget

/**
 * Init function of a widget
 * @param key string widget id
 */
define void CoolingPolicyInit (string key) {
    string value = (string)
	PowerManagement::current_scheme["POWERSAVE_COOLING_POLICY"]:"";
    if (value == "")
	value = "passive";
    UI::ChangeWidget (`id (`cooling_policy), `Value, value);
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void CoolingPolicyStore (string key, map event) {
    PowerManagement::current_scheme["POWERSAVE_COOLING_POLICY"]
	= (string)UI::QueryWidget (`id (`cooling_policy), `Value);
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getCoolingPolicyWidget () {
    return $[
	"widget" : `custom,
	// frame
	"custom_widget" : `Frame (_("Cooling Policy"), `VBox (
	    // combo box
	    `ComboBox (`id (`cooling_policy), `opt (`hstretch), _("&Status"), [
		//combo box item
		`item (`id ("active"), _("Active")),
		// combo box item
		`item (`id ("passive"),_("Passive")),
	    ])
	)),
	"init" : CoolingPolicyInit,
	"store" : CoolingPolicyStore,
	"help" : HELPS["cooling_policy"]:"",
    ];
}

// CPU settings widget

/**
 * Handle function of a widget
 * @param key string widget id
 * @param event map event that will be handled
 * @return symbol for wizard sequencer
 */
define symbol CpuHandle (string key, map event) {
    boolean enabled = (boolean)UI::QueryWidget (`id (`allow_throt), `Value);
    UI::ChangeWidget (`id (`max_throt), `Enabled, enabled);
    return nil;
}

/**
 * Init function of a widget
 * @param key string widget id
 */
define void CpuInit (string key) {
    UI::ChangeWidget (`id (`scaling), `Value,
	PowerManagement::current_scheme["POWERSAVE_CPUFREQUENCY"]:"dynamic");
    UI::ChangeWidget (`id (`allow_throt), `Value,
	PowerManagement::current_scheme["POWERSAVE_ALLOW_THROTTLING"]:"yes"
	    != "no");
    UI::ChangeWidget (`id (`max_throt), `Value, tointeger (
	PowerManagement::current_scheme["POWERSAVE_MAX_THROTTLING"]:"50"));
    CpuHandle (key, $[]);
}

/**
 * Store settings of a widget
 * @param key string widget id
 * @param event map event that caused storing of widget settings
 */
define void CpuStore (string key, map event) {
    PowerManagement::current_scheme["POWERSAVE_CPUFREQUENCY"]
	= (string)UI::QueryWidget (`id (`scaling), `Value);
    PowerManagement::current_scheme["POWERSAVE_ALLOW_THROTTLING"]
	= (boolean)UI::QueryWidget (`id (`allow_throt), `Value) ? "yes" : "no";
    PowerManagement::current_scheme["POWERSAVE_MAX_THROTTLING"]
	= sformat ("%1", (integer)UI::QueryWidget (`id (`max_throt), `Value));
}

/**
 * Get description map of a widget
 * @return map widget description map
 */
define map getCpuWidget () {
    return $[
	"widget" : `custom,
	// frame
	"custom_widget" : `Frame (_("CPU"), `VBox (
	    `VStretch (),
	    `ComboBox (`id (`scaling),
		// combo box
		_("Frequency Scaling"),
		[
		    // combo box item
		    `item (`id ("performance"), _("Maximum Performance")),
		    // combo box item
		    `item (`id ("powersave"), _("Maximim Energy Saving")),
		    // combo box item
		    `item (`id ("dynamic"), _("Dynamic Frequency Scaling")),
		]),
	    `VStretch (),
	    `HBox (
		`Left (`VBox (
		    `Label (" "),
		    `CheckBox (`id (`allow_throt), `opt (`hstretch, `notify),
			// check box
			_("Allow Throttling"))
		)),
		// integer field
		`IntField (`id (`max_throt), _("&Max. %"), 0, 100, 50)
	    ),
	    `VStretch ()
	)),
	"init" : CpuInit,
	"store" : CpuStore,
	"handle" : CpuHandle,
	"help" : HELPS["cpu"]:"",
    ];
}

// general settings

map widgets = $[
    "battery_warning" : getBatteryWarning (),
    "acpi_buttons" : getAcpiButtonsWidget (),
    "battery_warning_button" : getBatteryWarningButton (),
    "acpi_settings_button" : getAcpiSettingsButton (),
    "scheme_selection" : getSchemeSelectionWidget (),
    "schemes_list" : getSchemesListWidget (),
    "scheme_name" : getSchemeNameWidget (),
    "scheme_descr" : getSchemeDescrWidget (),
    "hard_disk" : getHardDiskWidget (),
    "cooling_policy" : getCoolingPolicyWidget (),
    "cpu" : getCpuWidget (),
];

/* EOF */
}
